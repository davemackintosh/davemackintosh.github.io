{
"version": 3,
"mappings": "AAGE,IAAK;EACH,UAAU,EAAE,UAAU;;AAItB,sBAEU;EACR,UAAU,EAAE,OAAO;;ACXzB,WAAY;EACV,MAAM,EAAE,IAAI;EACZ,KAAK,EAAE,KAAK;EAEZ,iBAAQ;IACN,MAAM,EAAE,CAAC;IAET,uBAAQ;MACN,eAAe,EAAE,IAAI;MACrB,MAAM,EAAE,CAAC;IAGX,wBAAS;MACP,OAAO,EAAE,KAAK;MACd,MAAM,EAAE,QAAqB;MAC7B,MAAM,EAAE,IAAI;;ACflB,sBAAuB;EACrB,WAAW,EAAE,sBAAsB;;ACArC,KAAI;EACF,UAAU,ECIM,GAAG;;ADDrB,UAAW;EACT,OAAO,EAAE,CAAC;EAAE,MAAM,EAAE,CAAC;;AAGvB,IAAK;EACH,UAAU,ECRK,OAAO;EDStB,IAAI,EAAE,wCAAoC;EAC1C,KAAK,ECDO,IAAI;EDGhB,UAAU,EAAE,UAAU;;AAIxB,CAAE;EACA,KAAK,EAAE,OAAO;EACd,eAAe,EAAE,IAAI;EAErB,iBACS;IACP,aAAa,EAAE,gBAAuB;IACtC,eAAe,EAAE,SAAS;EAG5B,QAAS;IACP,KAAK,EC3BQ,OAAO;ID4BpB,YAAY,EC5BC,OAAO;;ADiCtB,oBAEQ;EACN,UAAU,EAAE,OAAO;;AEtCvB,+CAAgB;EACd,OAAO,EDKS,GAAG;ECJnB,UAAU,EAAE,MAAM;;ACFpB,qBAAsB;EAEpB,MAAM,EAAE,KAAK;EACb,UAAU,EAAE,KAAK;EACjB,WAAW,EAAE,IAAI;ECmCjB,gBAAgB,EAJE,4DAA4C;EAK9D,gBAAgB,EAJE,oDAA4C;;AD5BhE,OAAQ;EAEN,UAAU,EFTE,IAAI;EIkCV,iBAAoB,EAAE,cAAM;EAI5B,cAAiB,EAAE,cAAM;EAIzB,aAAgB,EAAE,cAAM;EAIxB,YAAe,EAAE,cAAM;EAIvB,SAAY,EAAE,cAAM;EAhBpB,wBAAoB,EHnBA,QAAQ;EGuB5B,qBAAiB,EHvBG,QAAQ;EG2B5B,oBAAgB,EH3BI,QAAQ;EG+B5B,mBAAe,EH/BK,QAAQ;EGmC5B,gBAAY,EHnCQ,QAAQ;EAGlC,UAAU,EAAE,CAAC",
"sources": ["themes/dav3.co/scss/neat/grid/_box-sizing.scss","themes/dav3.co/scss/partials/_navigation.scss","themes/dav3.co/scss/partials/_headers.scss","themes/dav3.co/scss/partials/_global.scss","themes/dav3.co/scss/_theme.scss","themes/dav3.co/scss/mixins/_content.scss","themes/dav3.co/scss/pages/_index.scss","themes/dav3.co/scss/bourbon/css3/_background-image.scss","themes/dav3.co/scss/bourbon/addons/_prefixer.scss"],
"sourcesContent": ["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n",".navigation {\n  height: 20vh;\n  width: 100vw;\n\n  &__logo {\n    border: 0;\n\n    &:hover {\n      text-decoration: none;\n      border: 0;\n    }\n\n    &--image {\n      display: block;\n      margin: $vertical-rhythm auto;\n      height: 100%;\n    }\n  }\n}\n","h1, h2, h3, h4, h5, h6 {\n  font-family: 'Orbitron', sans-serif;\n}\n","// Automatic vertical rhythm.\n*+* {\n  margin-top: $vertical-rhythm;\n}\n\nhtml, body {\n  padding: 0; margin: 0;\n}\n\nhtml {\n  background: $primary-colour;\n  font: $font-weight $font-size $font-family;\n  color: $font-colour;\n\n  box-sizing: border-box;\n}\n\n// Fix link styles.\na {\n  color: inherit;\n  text-decoration: none;\n\n  &:hover,\n  &:active {\n    border-bottom: .1em solid $font-colour;\n    text-decoration: underline;\n  }\n\n  &:active {\n    color: $primary-colour;\n    border-color: $primary-colour;\n  }\n}\n\n* {\n  &,\n  &:before,\n  &:after {\n    box-sizing: inherit;\n  }\n}\n","// The colours used throughout the site.\n$base-colour: #333;\n$primary-colour: #0C8B90;\n$secondary-colour: #AB4180;\n\n// The general spacing between items vertically.\n$vertical-rhythm: 2vh;\n\n// Typography.\n$font-size: 1.8vw;\n$font-family: 'Roboto Condensed', sans-serif;\n$font-colour: #FFF;\n$font-weight: 300;\n\n// Other useful one-timers.\n$noise-data: url(\"/noise.png\");\n",".content-column {\n  padding: $vertical-rhythm;\n  text-align: center;\n}\n\n$breakpoints: (\n  'medium': (min-width: 800px),\n  'large': (min-width: 1000px),\n  'huge': (min-width: 1200px),\n);\n\n// Skew this element by N degrees and adjust the margin.\n// @param {Number} $amount - Amount to skew the Y axis.\n@mixin skew-content($amount: -6deg, $margin: true) {\n  // Skew the content on the y axis.\n  @include transform(skew(0, $amount));\n  @include transform-origin(top left);\n\n  // Make sure there's no top margin.\n  margin-top: 0;\n}\n\n// Responsive manager.\n// @access public\n// @link http://sass-guidelin.es/#breakpoint-manager\n// @param {String} $breakpoint - Breakpoint\n// @requires $breakpoints\n@mixin respond-to($breakpoint) {\n  $raw-query: map-get($breakpoints, $breakpoint);\n\n  @if $raw-query {\n    $query: if(type-of($raw-query) == 'string', unquote($raw-query), inspect($raw-query));\n\n    @media #{$query} {\n      @content;\n    }\n  } @else {\n    @error 'No value found for `#{$breakpoint}`. '\n         + 'Please make sure it is defined in `$breakpoints` map.';\n  }\n}\n",".colour--purple-green {\n  @extend .content-column;\n  height: 100vh;\n  margin-top: -20vh;\n  padding-top: 20vh;\n  @include background-image($noise-data, linear-gradient($primary-colour, $secondary-colour));\n}\n\n.colour {\n  @extend .content-column;\n  background: $base-colour;\n  @include skew-content();\n}\n","//************************************************************************//\n// Background-image property for adding multiple background images with\n// gradients, or for stringing multiple gradients together.\n//************************************************************************//\n\n@mixin background-image($images...) {\n  $webkit-images: ();\n  $spec-images: ();\n\n  @each $image in $images {\n    $webkit-image: ();\n    $spec-image: ();\n\n    @if (type-of($image) == string) {\n      $url-str:       str-slice($image, 1, 3);\n      $gradient-type: str-slice($image, 1, 6);\n\n      @if $url-str == \"url\" {\n        $webkit-image: $image;\n        $spec-image:   $image;\n      }\n\n      @else if $gradient-type == \"linear\" {\n        $gradients: _linear-gradient-parser($image);\n        $webkit-image:  map-get($gradients, webkit-image);\n        $spec-image:    map-get($gradients, spec-image);\n      }\n\n      @else if $gradient-type == \"radial\" {\n        $gradients: _radial-gradient-parser($image);\n        $webkit-image: map-get($gradients, webkit-image);\n        $spec-image:   map-get($gradients, spec-image);\n      }\n    }\n\n    $webkit-images: append($webkit-images, $webkit-image, comma);\n    $spec-images:   append($spec-images,   $spec-image,   comma);\n  }\n\n  background-image: $webkit-images;\n  background-image: $spec-images;\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n"],
"names": [],
"file": "theme.css"
}